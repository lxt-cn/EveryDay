#pragma once

#include <iostream>
using namespace std;

//////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
两个编程题：
	1>、变态跳台阶
	2>、快到碗里来
*/

//////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
1. 标题：变态跳台阶 | 时间限制：1秒 | 内存限制：32768K  
	一只青蛙一次可以跳上 1 级台阶，也可以跳上2级……它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。
*/
/*
【题目解析】：
	假定第一次跳的是 1 阶，那么剩下的是 n-1 个台阶，跳法是 f(n-1)；   
	假定第一次跳的是 2 阶，那么剩下的是 n-2 个台阶，跳法是 f(n-2)；
	假定第一次跳的是 3 阶，那么剩下的是 n-3 个台阶，跳法是 f(n-3)......   
	假定第一次跳的是n-1阶，那么剩下的是 1 个台阶，跳法是 f(1)；   
	假定第一次跳的是 n 阶，那么剩下的是 0 个台阶，跳法是 1 种；

【解题思路】：
	根据题图解析可以得出有一阶的时候 f(1) = 1 ；有两阶的时候可以有 f(2) = 1+f(1)=2 ；有三阶的时候可以有 f(3) = 1+f(2)+f(1)=4；...
    总跳法为: f(n) = 1+f(n-1) + f(n-2)+....+f(1) （第一个 1 是跳 n 阶只有一种方法）
	依次类推，得到类推公式有n阶时：f(n) = 2^(n-1)。
*/

class Solution {
public:    
	int jumpFloorII(int number)
	{       
		//2^(n-1) == 1 << (n-1)  
		return 1<<(number-1);  
	}
};

void ED01()
{
	Solution s;
	int n = 0;
	while (cin >> n)
	{
		cout << s.jumpFloorII(n) << endl;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
2. 标题：快到碗里来 | 时间限制：1秒 | 内存限制：32768K 
	小喵们很喜欢把自己装进容器里的（例如碗），但是要是碗的周长比喵的身长还短，它们就进不去了。
现在告诉你它们的身长，和碗的半径，请判断一下能否到碗里去。 

	输入描述： 
		输入有多组数据。
		每组数据包含两个整数n (1≤n≤2^128) 和r (1≤r≤2^128)，分别代表喵的身长和碗的半径。
		圆周率使用3.14。 
	输出描述： 
		对应每一组数据，如果喵能装进碗里就输出“Yes”；否则输出“No”。 
		
	示例1: 
		输入 
			6 1 
			7 1 
			9876543210 1234567890 
		输出 
			Yes 
			No 
			No
*/

void ED02() {
	double n, r; 
	while (cin >> n >> r) 
	{       
		//周长：2*r*3.1415      
		//身长：n       
		if(n > (2*r*3.1415))   
			cout<<"No"<<endl;
		else
			cout << "Yes" << endl;
	}   
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////

int main()
{
	//ED01();
	ED02();
	return 0;
}
