#include <iostream>
#include <vector>
#include <string>
using namespace std;

/////////////////////////////////////////////////////////////////////////////////////////
/*

两个编程题：
	1>、不要二
	2>、把字符串转换成整数

*/

/////////////////////////////////////////////////////////////////////////////////////////
/*

1>、
标题：不要二 | 时间限制：1秒 | 内存限制：32768k
	二货小易有一个W*H的网格盒子，网格的行编号为0~H-1，网格的列编号为0~W-1。每个格子至多可以放一
块蛋糕，任意两块蛋糕的欧几里得距离不能等于2。对于两个格子坐标(x1,y1),(x2,y2)的欧几里得距离为:
( (x1-x2) * (x1-x2) + (y1-y2) * (y1-y2) ) 的算术平方根，小易想知道最多可以放多少块蛋糕在网格盒子里。

	输入描述：
		每组数组包含网格长宽W,H，用空格分割.(1 ≤ W、H ≤ 1000)
	输出描述：
		输出一个最多可以放的蛋糕数

*/
/////////////////////////////////////////////////////////////////////////////////////////

void ED01()
{
	int W = 0;	//列
	int N = 0;	//行
	cin >> W >> N;
	vector<vector<int>> Arr;
	Arr.resize(N);
	for (auto& e : Arr)
	{
		e.resize(W, 1);
	}

	//W = 5, N = 4
	// 1	1	0	1	1
	// 1	1	0	1	1  
	// 0	0	1	0	0
	// 0	0	1	0	0


	int count = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < W; j++)
		{
			if (Arr[i][j] == 1)
			{
				count++;
				// 标记不能放蛋糕的位置
				if ((i + 2) < N)
				{
					Arr[i + 2][j] = 0;
				}
				if ((j + 2) < W)
				{
					Arr[i][j + 2] = 0;
				}
			}
		}
	}
	cout << count << endl;
}

///////////////////////////////////////////////////////////////////////////////////////////

/*

2>、
标题：把字符串转换成整数 | 时间限制：1秒 | 内存限制：32768K 
	将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，
但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 
数值为0或者字符串不是一个合法的数值则返回0。

	输入描述：
		输入一个字符串,包括数字字母符号,可以为空
	输出描述：
		如果是合法的数值表达则返回该数字，否则返回0

*/

///////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
	int StrToInt(string str) {
		//为空
		if (str.empty())
		{
			return 0;
		}

		//处理正负号
		int sym = 1;
		if (str[0] == '-')
		{
			sym = -1;
			str[0] = '0';
		}
		else if(str[0] == '+')
		{
			str[0] = '0';
		}
		
		int ret = 0;
		for (int i = 0; i < str.size(); i++)
		{
			if (str[i] < '0' || str[i] > '9')
			{
				//非法字符
				ret = 0;
				break;
			}

			ret = ret * 10 + str[i] - '0';
		}
		return sym * ret;
	}
};

void ED02()
{
	Solution S;
	string str;
	getline(cin, str);
	cout << S.StrToInt(str) << endl;
}
//////////////////////////////////////////////////////////////////////////////////////////

int main()
{
	ED01();
	ED02();
	return 0;
}