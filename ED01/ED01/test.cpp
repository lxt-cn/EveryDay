/*
	两个编程题：
		1>、组队竞赛
		2>、删除公共字符
*/

///////////////////////////////////////////////////////////////////////////////

//两个题中会用到的头
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

////////////////////////////////////////////////////////////////////////////////
/*
1>、
标题：组队竞赛 | 时间限制 ：1秒 | 内存限制：32768k
	牛牛举办了一次编程比赛，参加比赛的有 3*n 个选手，每个选手都有一个水平值 a_i ,
现在要将这些选手进行组队，一共组成 n 个队伍，即每个队伍 3 人，牛牛发现队伍的水平值
等于该队伍队员中第二高水平值。
	例如：
		一个队伍三个队伍的水平之分别为 3，3，3，那么队伍水平值为 3
		一个队伍三个队伍的水平之分别为 3，2，3，那么队伍水平值为 3
		一个队伍三个队伍的水平之分别为 1，5，2，那么队伍水平值为 2
	为了让比赛更有看点，牛牛向安排队伍使所有的队伍的水平值总和最大
	如样式所示：
		如果牛牛把 6 个队员划分到两个队伍
		如果方案为：team1；{1，2，5}，team2：{5，5，8}.水平值总和为 7
		如果方案为：team1；{2，5，8}，team2：{1，5，5}.水平值总和为 10
		没有比总和为 10 更大的方案，所以输出 10

	输入描述：
		输入的第一行为一个正整数 n (1 <= n <= 10^5)
		第二行包括 3*n 个整数 a_i (1 <= a_i <= 10^9),表示各个参赛选手水平值。
	输出描述：
		输出一个整数，表示所有队伍的水平值总和的最大值
*/

void ED01()
{
	int n;
	while (cin >> n)
	{
		long long sum = 0;
		vector<int> a;
		a.resize(3 * n);
		for (int i = 0; i < (3 * n); i++)
		{
			cin >> a[i];
		}
		/*
		排序，然后去下标为 3n-2, 3n-4, ... , n+2, n 位置的元素
		累加即可，相当于下标为 [0, n-1] 的 n 个数做每组的最左边
		的数，剩下的 2 个数据两个为一组，大的值做最右边的数，次
		大的数做中间数，再把次大的数累加。
		*/
		std::sort(a.begin(), a.end());
		for (int i = n; i <= 3 * n - 2; i += 2)
		{
			sum += a[i];
		}
		cout << sum << endl;
	}
}

/////////////////////////////////////////////////////////////////////////
/*
2>、
标题：删除公共字符 | 时间限制：1秒 | 内存限制：32768K
	输入两个字符串，从第一字符串中删除第二个字符串中所有的字符。例如，输入”They are
students.”和”aeiou”，则删除之后的第一个字符串变成”Thy r stdnts.”

	输入描述：
		每个测试输入包含2个字符串
	输出描述：
		输出删除后的字符串
*/

void ED02()
{
	string str1, str2;
	//cin 遇到空格就结束了，输入字符串时最好使用 getline
	getline(cin, str1);
	getline(cin, str2);

	//使用哈希映射思想先 str2 统计字符出现的次数
	int hashtable[256] = { 0 };
	for (size_t i = 0; i < str2.size(); ++i)
	{
		hashtable[str2[i]]++;
	}
	/*
	遍历 str1 ,str1[i] 映射 hashtable 对应位置为 0 ，则表示这个字符在 str2 中没有出现过，
	则将它 += 到 ret 。 
	注意这里最好不要 str1.erase(i),因为边遍历，边erase,容易出错。
	*/
	string ret;
	for (size_t i = 0; i < str1.size(); ++i)
	{
		if (hashtable[str1[i]] == 0)
		{
			ret += str1[i];
		}
	}
	cout << ret << endl;
}

///////////////////////////////////////////////////////////////////////////
int main()
{
	ED01();
	ED02();
	return 0;
}