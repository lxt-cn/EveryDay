#pragma once

#include <iostream>
#include <string>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*

两个编程题：
	1>、收件人列表
	2>、养兔子

*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*

1. 标题：收件人列表 | 时间限制：1秒 | 内存限制：32768K 
	NowCoder每天要给许多客户写电子邮件。正如你所知，如果一封邮件中包含多个收件人，收件人姓名之间 会用一个逗号和空格隔开；
如果收件人姓名也包含空格或逗号，则姓名需要用双引号包含。现在给你一组收件人姓名，请你帮他生成相应的收件人列表。

	输入描述： 
		输入包含多组数据。
		每组数据的第一行是一个整数n (1≤n≤128)，表示后面有n个姓名。
		紧接着n行，每一行包含一个收件人的姓名。姓名长度不超过16个字符。
	输出描述： 
		对应每一组输入，输出一行收件人列表。 
		
	示例1:
		输入
			3
			Joe
			Quan, William
			Letendre,Bruce
			2
			Leon 
			Kewell
		输出 
		Joe, "Quan, William", "Letendre,Bruce"
		Leon, Kewell

*/

void ED01() 
{
	int n;
	while (std::cin >> n) //接收数字 
	{
		std::cin.get(); //处理回车   
		std::string name;
		for(int i=0; i < n; i++) //名字分别处理       
		{
			bool quote = false; 
			std::getline(std::cin, name);   
			if (name.find(',') != std::string::npos || name.find(' ') != std::string::npos) //找到逗号或者空格，就要加双引号       
			{
				quote = true;    
			}
			if (quote) 
			{
				putchar('\"'); //putchar效率更高     
			}
			std::cout << name; 
			if (quote)
			{ 
				putchar('\"');      
			}
			if (i == n - 1) //如果已经是最后一个字符串，那就补回车，否则加逗号和空格 
			{
				putchar('\n');
			}
			else 
			{
				putchar(',');
				putchar(' ');      
			}
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*

2. 标题：养兔子 | 时间限制：1秒 | 内存限制：32768K 
	一只成熟的兔子每天能产下一胎兔子。每只小兔子的成熟期是一天。 某人领养了一只小兔子，请问第N天以 后，他将会得到多少只兔子。
	
	输入描述： 
		测试数据包括多组，每组一行，为整数n(1≤n≤90)。
	输出描述：
		对应输出第n天有几只兔子(假设没有兔子死亡现象)。 
		
	示例1:
		输入 
			1
			2 
		输出 
			1
			2

*/

void ED02() 
{
	long long n[91] = { 1, 2 };
	for (int i = 2; i <= 90; i++) 
	{
		n[i] = n[i - 1] + n[i - 2]; 
	}
	int d;
	while (std::cin >> d)
	{
		printf("%lld\n", n[d - 1]);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main()
{
	//ED01();
	ED02();
	return 0;
}